/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.39
 * Generated at: 2020-03-26 06:05:37 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.view;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class _3d_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=utf-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("    \r\n");
      out.write("    ");

	String path = request.getContextPath();
	// 获得本项目的地址(例如: http://localhost:8080/MyApp/)赋值给basePath变量 
	String basePath = request.getScheme() + "://" + request.getServerName() + ":" + request.getServerPort()
			+ path + "/";
	// 将 "项目路径basePath" 放入pageContext中，待以后用EL表达式读出。 
	pageContext.setAttribute("basePath", basePath);

      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head includeDefault=\"true\">\r\n");
      out.write("  <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\r\n");
      out.write("  <meta name=\"viewport\" content=\"width=device-width, user-scalable=no, minimum-scale=1.0, maximum-scale=1.0\">\r\n");
      out.write("  <title>图书馆虚拟空间</title>\r\n");
      out.write("  <style>\r\n");
      out.write("    body {\r\n");
      out.write("      margin: 0;\r\n");
      out.write("      overflow: hidden;\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    #label {\r\n");
      out.write("      position: absolute;\r\n");
      out.write("      padding: 10px;\r\n");
      out.write("      background: rgba(255, 255, 255, 0.6);\r\n");
      out.write("      line-height: 1;\r\n");
      out.write("      border-radius: 5px;\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    #video {\r\n");
      out.write("      position: absolute;\r\n");
      out.write("      width: 0;\r\n");
      out.write("      height: 0;\r\n");
      out.write("    }\r\n");
      out.write("  </style>\r\n");
      out.write("  <base href=\"");
      out.print(basePath);
      out.write("\" />\r\n");
      out.write("  \r\n");
      out.write(" \t<script src=\"");
      out.print(basePath);
      out.write("ThreeJs/js/three.js\" tppabs=\"http://www.yuyaowujin.top/ThreeJs/js/three.js\"></script>\r\n");
      out.write("\t\t<script src=\"");
      out.print(basePath);
      out.write("ThreeJs/js/stats.min.js\" tppabs=\"http://www.yuyaowujin.top/ThreeJs/js/stats.min.js\"></script>\r\n");
      out.write("\t\t<script src=\"");
      out.print(basePath);
      out.write("ThreeJs/js/DragControls.js\" tppabs=\"http://www.yuyaowujin.top/ThreeJs/js/DragControls.js\"></script>\r\n");
      out.write("\t\t<script src=\"");
      out.print(basePath);
      out.write("ThreeJs/js/OrbitControls.js\" tppabs=\"http://www.yuyaowujin.top/ThreeJs/js/OrbitControls.js\"></script>\r\n");
      out.write("\t\t<script src=\"");
      out.print(basePath);
      out.write("ThreeJs/js/FirstPersonControls.js\" tppabs=\"http://www.yuyaowujin.top/ThreeJs/js/FirstPersonControls.js\"></script>\r\n");
      out.write("\t\t<script src=\"");
      out.print(basePath);
      out.write("ThreeJs/js/TransformControls.js\" tppabs=\"http://www.yuyaowujin.top/ThreeJs/js/TransformControls.js\"></script>\r\n");
      out.write("\t\t<script src=\"");
      out.print(basePath);
      out.write("ThreeJs/js/dat.gui.min.js\" tppabs=\"http://www.yuyaowujin.top/ThreeJs/js/dat.gui.min.js\"></script>\r\n");
      out.write("\t\t<script src=\"");
      out.print(basePath);
      out.write("ThreeJs/js/EffectComposer.js\" tppabs=\"http://www.yuyaowujin.top/ThreeJs/js/EffectComposer.js\"></script>\r\n");
      out.write("\t\t<script src=\"");
      out.print(basePath);
      out.write("ThreeJs/js/RenderPass.js\" tppabs=\"http://www.yuyaowujin.top/ThreeJs/js/RenderPass.js\"></script>\r\n");
      out.write("\t\t<script src=\"");
      out.print(basePath);
      out.write("ThreeJs/js/OutlinePass.js\" tppabs=\"http://www.yuyaowujin.top/ThreeJs/js/OutlinePass.js\"></script>\r\n");
      out.write("\t\t<script src=\"");
      out.print(basePath);
      out.write("ThreeJs/js/FXAAShader.js\" tppabs=\"http://www.yuyaowujin.top/ThreeJs/js/FXAAShader.js\"></script>\r\n");
      out.write("\t\t<script src=\"");
      out.print(basePath);
      out.write("ThreeJs/js/CopyShader.js\" tppabs=\"http://www.yuyaowujin.top/ThreeJs/js/CopyShader.js\"></script>\r\n");
      out.write("\t\t<script src=\"");
      out.print(basePath);
      out.write("ThreeJs/js/ShaderPass.js\" tppabs=\"http://www.yuyaowujin.top/ThreeJs/js/ShaderPass.js\"></script>\r\n");
      out.write("\t\t<script src=\"");
      out.print(basePath);
      out.write("ThreeJs/js/ThreeBSP.js\" tppabs=\"http://www.yuyaowujin.top/ThreeJs/js/ThreeBSP.js\"></script>\r\n");
      out.write("\t\t<script src=\"");
      out.print(basePath);
      out.write("ThreeJs/ThreeJs_Drag.js\" tppabs=\"http://www.yuyaowujin.top/ThreeJs/ThreeJs_Drag.js\" charset=\"UTF-8\"></script>\r\n");
      out.write("\t\t<script src=\"");
      out.print(basePath);
      out.write("ThreeJs/MyThreeJsComposer.js\" tppabs=\"http://www.yuyaowujin.top/ThreeJs/ThreeJs_Composer.js\" charset=\"UTF-8\"></script>\r\n");
      out.write("\t\t<script src=\"");
      out.print(basePath);
      out.write("ThreeJs/MyModules.js\" charset = \"UTF-8\" > </script>\r\n");
      out.write("\t\t<script src=\"");
      out.print(basePath);
      out.write("ThreeJs/js/Tween.js\" tppabs=\"http://www.yuyaowujin.top/ThreeJs/js/Tween.js\"></script>\r\n");
      out.write("\t\t<script src=\"");
      out.print(basePath);
      out.write("ThreeJs/js/jquery-1.11.0.min.js\" tppabs=\"http://www.yuyaowujin.top/ThreeJs/js/jquery-1.11.0.min.js\"></script>\r\n");
      out.write("\t\t<script src=\"");
      out.print(basePath);
      out.write("echarts/echarts.min.js\" tppabs=\"http://www.yuyaowujin.top/echarts/echarts.min.js\"></script>\r\n");
      out.write("\t\t<script src=\"");
      out.print(basePath);
      out.write("ThreeJs/MyConfig.js\"  > </script>\r\n");
      out.write("</head>\r\n");
      out.write("\r\n");
      out.write("<body>\r\n");
      out.write(" <div id=\"label\"></div>\r\n");
      out.write("\t\t<div id=\"container\"></div>\r\n");
      out.write("\t\t<script>\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\t(function ($) {\r\n");
      out.write("\t\t\t                $.getUrlParam = function (name) {\r\n");
      out.write("\t\t\t                    var reg = new RegExp(\"(^|&)\" + name + \"=([^&]*)(&|$)\");\r\n");
      out.write("\t\t\t                    var r = window.location.search.substr(1).match(reg);\r\n");
      out.write("\t\t\t                    if (r != null) return unescape(r[2]); return null;\r\n");
      out.write("\t\t\t                }\r\n");
      out.write("\t\t\t            })(jQuery);\r\n");
      out.write("\t\t\t\t\t\t\r\n");
      out.write("\t\t\t\t\t\t\r\n");
      out.write("\t\t\tvar scene, camera, renderer, controls, light, composer, transformControls;\r\n");
      out.write("\t\t\t/**\r\n");
      out.write("\t\t\t * 初始化场景,创建场景对象scene\r\n");
      out.write("\t\t\t */\r\n");
      out.write("\t\t\tfunction initScene() {\r\n");
      out.write("\t\t\t\tscene = new THREE.Scene();\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\r\n");
      out.write("\t\t\t/**\r\n");
      out.write("\t\t\t * 初始化相机\r\n");
      out.write("\t\t\t * 四个参数分别代表了摄像机的视角、宽高比、近和远两个视截面。\r\n");
      out.write("\t\t\t * x y z 默认情况下相机的上方向为Y轴，右方向为X轴，沿着Z轴朝里\r\n");
      out.write("\t\t\t */\r\n");
      out.write("\t\t\tfunction initCamera() {\r\n");
      out.write("\t\t\t\t// camera = new THREE.PerspectiveCamera(45, window.innerWidth / window.innerHeight, 0.1, 10000);\r\n");
      out.write("\t\t\t\t// camera.position.set(100, 100, 2000);\r\n");
      out.write("\t\t\t\tcamera = new THREE.PerspectiveCamera(45, window.innerWidth / window.innerHeight, 0.1, 10000);\r\n");
      out.write("\t\t\t\tcamera.position.set(0, 500, 1500); //设置透视投影的相机\r\n");
      out.write("\t\t\t\tcamera.lookAt(new THREE.Vector3(0, 0, 0));\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\r\n");
      out.write("\t\t\t/**\r\n");
      out.write("\t\t\t * 初始化灯光\r\n");
      out.write("\t\t\t * DirectionalLight模拟远处类似太阳的光源，平行光。\r\n");
      out.write("\t\t\t * AmbientLight环境光,影响整个场景的光源，该光源没有特别得来源方向，也不会产生阴影。\r\n");
      out.write("\t\t\t * 通常不会使用THREE.AmbientLight作为场景内的唯一光源，一般配合点光源或者平行光等光源使用。其作用是为了弱化阴影或给场景添加一些额外的颜色。\r\n");
      out.write("\t\t\t */\r\n");
      out.write("\t\t\tfunction initLight() {\r\n");
      out.write("\t\t\t\tvar directionalLight = new THREE.DirectionalLight(0xffffff, 0.3);\r\n");
      out.write("\t\t\t\tdirectionalLight.color.setHSL(0.1, 1, 0.95);\r\n");
      out.write("\t\t\t\tdirectionalLight.position.set(0, 200, 0).normalize();\r\n");
      out.write("\t\t\t\tscene.add(directionalLight);\r\n");
      out.write("\t\t\t\tvar ambient = new THREE.AmbientLight(0xffffff, 1);\r\n");
      out.write("\t\t\t\tambient.position.set(0, 0, 0);\r\n");
      out.write("\t\t\t\tscene.add(ambient);\r\n");
      out.write("\t\t\t\tvar pointLight = new THREE.PointLight();\r\n");
      out.write("\t\t\t\tpointLight.position.set(0, 1500, 10000);\r\n");
      out.write("\t\t\t\tscene.add(pointLight);\r\n");
      out.write("\t\t\t\t//添加聚光灯光源\r\n");
      out.write("\t\t\t\t// var spotLight = new THREE.SpotLight(0xff0000);\r\n");
      out.write("\t\t\t\t// spotLight.position.set(0, 600, 0);\r\n");
      out.write("\t\t\t\t// spotLight.castShadow = true;\r\n");
      out.write("\t\t\t\t// scene.add(spotLight);\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\r\n");
      out.write("\t\t\t/**\r\n");
      out.write("\t\t\t * 初始化渲染器\r\n");
      out.write("\t\t\t */\r\n");
      out.write("\t\t\tfunction initRenderer() {\r\n");
      out.write("\t\t\t\trenderer = new THREE.WebGLRenderer({\r\n");
      out.write("\t\t\t\t\tantialias: true,\r\n");
      out.write("\t\t\t\t\talpha: true\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t});\r\n");
      out.write("\t\t\t\trenderer.setSize(window.innerWidth, window.innerHeight);\r\n");
      out.write("\t\t\t\trenderer.setClearColor(0xb9d3ff, 1); //设置背景颜色\r\n");
      out.write("\t\t\t\tdocument.body.appendChild(renderer.domElement);\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\r\n");
      out.write("\t\t\t/**\r\n");
      out.write("\t\t\t * 初始化场景内容\r\n");
      out.write("\t\t\t */\r\n");
      out.write("\t\t\tfunction initContent() {\r\n");
      out.write("\t\t\t\tcreateFloor(8000, 6000, 1); //创建地板\r\n");
      out.write("\t\t\t\tcreateWallMaterail(); //墙的材质\r\n");
      out.write("\t\t\t\tcreatePillar(scene); //创建柱子\r\n");
      out.write("\t\t\t\tcreateCircle(800); //中央圆区\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t//墙体材质\r\n");
      out.write("\t\t\t\t//横梁蓝色瓷砖\r\n");
      out.write("\t\t\t\tvar hengLiangTexture = THREE.ImageUtils.loadTexture('ThreeJs/images/蓝色瓷砖.jpg', {}, function() {\r\n");
      out.write("\t\t\t\t\trenderer.render(scene, camera);\r\n");
      out.write("\t\t\t\t});\r\n");
      out.write("\t\t\t\tvar hengLiangMaterial = new THREE.MeshBasicMaterial({\r\n");
      out.write("\t\t\t\t\tmap: hengLiangTexture,\r\n");
      out.write("\t\t\t\t});\r\n");
      out.write("\t\t\t\t//透明蓝玻璃材质\r\n");
      out.write("\t\t\t\tvar materialBlueClass = new THREE.MeshLambertMaterial({\r\n");
      out.write("\t\t\t\t\tcolor: 0x6495ED,\r\n");
      out.write("\t\t\t\t\topacity: 0.5, //0~1之间0是全透明，1是不透明\r\n");
      out.write("\t\t\t\t\ttransparent: true //是否开启透明度效果\r\n");
      out.write("\t\t\t\t}); //材质对象Material，MeshLambertMaterial漫反射\r\n");
      out.write("\t\t\t\t//黄褐色瓷砖\r\n");
      out.write("\t\t\t\tvar huangHeTexture = THREE.ImageUtils.loadTexture('ThreeJs/images/黄褐色瓷砖1.jpg', {}, function() {\r\n");
      out.write("\t\t\t\t\trenderer.render(scene, camera);\r\n");
      out.write("\t\t\t\t});\r\n");
      out.write("\t\t\t\thuangHeTexture.wrapS = THREE.RepeatWrapping; //重复包裹\r\n");
      out.write("\t\t\t\thuangHeTexture.wrapT = THREE.RepeatWrapping;\r\n");
      out.write("\t\t\t\thuangHeTexture.repeat.set(4, 4);\r\n");
      out.write("\t\t\t\tvar huangHeMaterial = new THREE.MeshBasicMaterial({\r\n");
      out.write("\t\t\t\t\tmap: huangHeTexture,\r\n");
      out.write("\t\t\t\t});\r\n");
      out.write("\t\t\t\t//黄褐色瓷砖横条\r\n");
      out.write("\t\t\t\tvar huangHeTiaoTexture = THREE.ImageUtils.loadTexture('ThreeJs/images/大方格不规则墙砖.jpg', {}, function() {\r\n");
      out.write("\t\t\t\t\trenderer.render(scene, camera);\r\n");
      out.write("\t\t\t\t});\r\n");
      out.write("\t\t\t\thuangHeTiaoTexture.wrapS = THREE.RepeatWrapping; //重复包裹\r\n");
      out.write("\t\t\t\thuangHeTiaoTexture.wrapT = THREE.RepeatWrapping;\r\n");
      out.write("\t\t\t\thuangHeTiaoTexture.repeat.set(12, 3);\r\n");
      out.write("\t\t\t\tvar huangHeTiaoMaterial = new THREE.MeshBasicMaterial({\r\n");
      out.write("\t\t\t\t\tmap: huangHeTiaoTexture,\r\n");
      out.write("\t\t\t\t});\r\n");
      out.write("\t\t\t\t//黄褐色瓷砖\r\n");
      out.write("\t\t\t\tvar backTexture = THREE.ImageUtils.loadTexture('ThreeJs/images/黄褐色瓷砖.jpg', {}, function() {\r\n");
      out.write("\t\t\t\t\trenderer.render(scene, camera);\r\n");
      out.write("\t\t\t\t});\r\n");
      out.write("\t\t\t\tbackTexture.wrapS = THREE.RepeatWrapping; //重复包裹\r\n");
      out.write("\t\t\t\tbackTexture.wrapT = THREE.RepeatWrapping;\r\n");
      out.write("\t\t\t\tbackTexture.repeat.set(8, 4);\r\n");
      out.write("\t\t\t\tvar backMaterial = new THREE.MeshBasicMaterial({\r\n");
      out.write("\t\t\t\t\tmap: backTexture,\r\n");
      out.write("\t\t\t\t});\r\n");
      out.write("\t\t\t\t//createCubeWall(width, height, depth, angle, material, x, y, z, name)width长度, height高度, depth前后的厚度\r\n");
      out.write("\t\t\t\tcreateCubeWall(120, 400, 200, 0, hengLiangMaterial, -1700, 200, 2500, \"墙\"); //门左墙\r\n");
      out.write("\t\t\t\tcreateCubeWall(120, 400, 200, 0, hengLiangMaterial, 1700, 200, 2500, \"墙\"); //门右墙\r\n");
      out.write("\t\t\t\tcreateCubeWall(3520, 40, 600, 0, hengLiangMaterial, 0, 420, 2300, \"墙\"); //门横梁\r\n");
      out.write("\t\t\t\tcreateCubeWall(10, 440, 200, 0, materialBlueClass, -2000, 220, 1900, \"墙\"); //门前大玻璃左侧\r\n");
      out.write("\t\t\t\tcreateCubeWall(10, 440, 200, 0, materialBlueClass, 2000, 220, 1900, \"墙\"); //门前大玻璃右侧\r\n");
      out.write("\t\t\t\tcreateCubeWall(4000, 40, 200, 0, materialBlueClass, 0, 420, 1900, \"墙\"); //门前大玻璃顶部\r\n");
      out.write("\t\t\t\tcreateCubeWall(20, 2000, 4000, 0, huangHeMaterial, -3500, 1000, -200, \"墙\"); //左侧褐色墙\r\n");
      out.write("\t\t\t\tcreateCubeWall(20, 2000, 4000, 0, huangHeMaterial, 3500, 1000, -200, \"墙\"); //右侧褐色墙\r\n");
      out.write("\t\t\t\tcreateCubeWall(7000, 2000, 20, 0, backMaterial, 0, 1000, -2200, \"墙\"); //后侧褐色墙\r\n");
      out.write("\t\t\t\tcreateCubeWall(4000, 20, 600, 0, huangHeTiaoMaterial, 0, 1040, 1510, \"墙\"); //第二层柱子支撑面\r\n");
      out.write("\t\t\t\tcreateCubeWall(20, 960, 600, 0, huangHeMaterial, -2000, 1520, 1510, \"墙\"); //第二层柱子支撑面左\r\n");
      out.write("\t\t\t\tcreateCubeWall(20, 960, 600, 0, huangHeMaterial, 2000, 1520, 1510, \"墙\"); //第二层柱子支撑面右\r\n");
      out.write("\t\t\t\tcreateCubeWall(4000, 960, 20, 0, materialBlueClass, 0, 1520, 1210, \"墙\"); //第二层柱子后面的蓝色玻璃\r\n");
      out.write("\t\t\t\tcreateCubeWall(7020, 40, 4020, 0, huangHeMaterial, 0, 2000, -200, \"墙\"); //封顶的墙\r\n");
      out.write("\t\t\t\tdingQiu(1000);\r\n");
      out.write("\t\t\t\tcreatePillarUp(scene);\r\n");
      out.write("\t\t\t\t//返回墙对象returnWallObject(width, height, depth, angle, material, x, y, z, name)\r\n");
      out.write("\t\t\t\tvar wall = returnWallObject(4000, 440, 10, 0, materialBlueClass, 0, 220, 2000, \"墙\"); //门前大玻璃\r\n");
      out.write("\t\t\t\t//先在墙面上挖出门的框\r\n");
      out.write("\t\t\t\tvar door_cube1 = returnWallObject(600, 400, 10, 0, materialBlueClass, -400, 200, 2000, \"门\"); //前门1\r\n");
      out.write("\t\t\t\tvar door_cube2 = returnWallObject(600, 400, 10, 0, materialBlueClass, 400, 200, 2000, \"门\"); //前门2\r\n");
      out.write("\t\t\t\tvar objects_cube = [];\r\n");
      out.write("\t\t\t\tobjects_cube.push(door_cube1);\r\n");
      out.write("\t\t\t\tobjects_cube.push(door_cube2);\r\n");
      out.write("\t\t\t\tcreateResultBsp(wall, objects_cube, materialBlueClass);\r\n");
      out.write("\t\t\t\t//再为墙面安装门\r\n");
      out.write("\t\t\t\t//createDoor_right(width, height, depth, angle, x, y, z, name)\r\n");
      out.write("\t\t\t\tcreateDoor_left(300, 400, 10, 0, -600, 200, 2000, \"门左\"); //门1左\r\n");
      out.write("\t\t\t\tcreateDoor_right(300, 400, 10, 0, -200, 200, 2000, \"门右\"); //门1右\r\n");
      out.write("\t\t\t\tcreateDoor_left(300, 400, 10, 0, 200, 200, 2000, \"门左\"); //门2左\r\n");
      out.write("\t\t\t\tcreateDoor_right(300, 400, 10, 0, 600, 200, 2000, \"门右\"); //门2右\r\n");
      out.write("\t\t\t\t//开窗户\r\n");
      out.write("\t\t\t\tvar wallUp = returnWallObject(4000, 600, 20, 0, huangHeTiaoMaterial, 0, 740, 1810, \"墙\"); //玻璃顶上的褐色墙\r\n");
      out.write("\t\t\t\t//先在墙面上挖出门的框\r\n");
      out.write("\t\t\t\tvar window_cube1 = returnWallObject(400, 400, 20, 0, huangHeTiaoMaterial, -1200, 740, 1810, \"窗\"); //中窗户左起1\r\n");
      out.write("\t\t\t\tvar window_cube2 = returnWallObject(400, 400, 20, 0, huangHeTiaoMaterial, -400, 740, 1810, \"窗\"); //中窗户2\r\n");
      out.write("\t\t\t\tvar window_cube3 = returnWallObject(400, 400, 20, 0, huangHeTiaoMaterial, 400, 740, 1810, \"窗\"); //中窗户3\r\n");
      out.write("\t\t\t\tvar window_cube4 = returnWallObject(400, 400, 20, 0, huangHeTiaoMaterial, 1200, 740, 1810, \"窗\"); //中窗户4\r\n");
      out.write("\t\t\t\tvar objects_windowCube = [];\r\n");
      out.write("\t\t\t\tobjects_windowCube.push(window_cube1);\r\n");
      out.write("\t\t\t\tobjects_windowCube.push(window_cube2);\r\n");
      out.write("\t\t\t\tobjects_windowCube.push(window_cube3);\r\n");
      out.write("\t\t\t\tobjects_windowCube.push(window_cube4);\r\n");
      out.write("\t\t\t\tcreateResultBsp(wallUp, objects_windowCube, huangHeTiaoMaterial);\r\n");
      out.write("\t\t\t\t//为墙面安装窗户\r\n");
      out.write("\t\t\t\t//createWindow(width, height, depth, angle, x, y, z, name)\r\n");
      out.write("\t\t\t\tcreateWindow(400, 400, 20, 0, -1200, 740, 1810, \"窗\"); //中窗户左起1\r\n");
      out.write("\t\t\t\tcreateWindow(400, 400, 20, 0, -400, 740, 1810, \"窗\"); //中窗户2\r\n");
      out.write("\t\t\t\tcreateWindow(400, 400, 20, 0, 400, 740, 1810, \"窗\"); //中窗户3\r\n");
      out.write("\t\t\t\tcreateWindow(400, 400, 20, 0, 1200, 740, 1810, \"窗\"); //中窗户4\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t//开左右窗户\r\n");
      out.write("\t\t\t\t//开左窗户\r\n");
      out.write("\t\t\t\tvar wallLeft = returnWallObject(1520, 2000, 20, 0, huangHeTiaoMaterial, -2750, 1000, 1810, \"墙\"); //玻璃左侧褐色墙\r\n");
      out.write("\t\t\t\tvar window_cube_left1 = returnWallObject(150, 400, 20, 0, huangHeMaterial, -3300, 300, 1810, \"窗\"); //左窗户1\r\n");
      out.write("\t\t\t\tvar window_cube_left2 = returnWallObject(150, 400, 20, 0, huangHeMaterial, -3000, 300, 1810, \"窗\");\r\n");
      out.write("\t\t\t\tvar window_cube_left3 = returnWallObject(150, 400, 20, 0, huangHeMaterial, -2500, 300, 1810, \"窗\");\r\n");
      out.write("\t\t\t\tvar window_cube_left4 = returnWallObject(150, 400, 20, 0, huangHeMaterial, -2200, 300, 1810, \"窗\");\r\n");
      out.write("\t\t\t\tvar window_cube_left5 = returnWallObject(150, 400, 20, 0, huangHeMaterial, -3300, 800, 1810, \"窗\");\r\n");
      out.write("\t\t\t\tvar window_cube_left6 = returnWallObject(150, 400, 20, 0, huangHeMaterial, -3000, 800, 1810, \"窗\");\r\n");
      out.write("\t\t\t\tvar window_cube_left7 = returnWallObject(150, 400, 20, 0, huangHeMaterial, -2500, 800, 1810, \"窗\");\r\n");
      out.write("\t\t\t\tvar window_cube_left8 = returnWallObject(150, 400, 20, 0, huangHeMaterial, -2200, 800, 1810, \"窗\");\r\n");
      out.write("\t\t\t\tvar window_cube_left9 = returnWallObject(150, 400, 20, 0, huangHeMaterial, -3300, 1300, 1810, \"窗\");\r\n");
      out.write("\t\t\t\tvar window_cube_left10 = returnWallObject(150, 400, 20, 0, huangHeMaterial, -3000, 1300, 1810, \"窗\");\r\n");
      out.write("\t\t\t\tvar window_cube_left11 = returnWallObject(150, 400, 20, 0, huangHeMaterial, -2500, 1300, 1810, \"窗\");\r\n");
      out.write("\t\t\t\tvar window_cube_left12 = returnWallObject(150, 400, 20, 0, huangHeMaterial, -2200, 1300, 1810, \"窗\");\r\n");
      out.write("\t\t\t\tvar window_cube_left13 = returnWallObject(150, 400, 20, 0, huangHeMaterial, -3300, 1800, 1810, \"窗\");\r\n");
      out.write("\t\t\t\tvar window_cube_left14 = returnWallObject(150, 400, 20, 0, huangHeMaterial, -3000, 1800, 1810, \"窗\");\r\n");
      out.write("\t\t\t\tvar window_cube_left15 = returnWallObject(150, 400, 20, 0, huangHeMaterial, -2500, 1800, 1810, \"窗\");\r\n");
      out.write("\t\t\t\tvar window_cube_left16 = returnWallObject(150, 400, 20, 0, huangHeMaterial, -2200, 1800, 1810, \"窗\"); //左窗户16\r\n");
      out.write("\t\t\t\tvar objects_windowCubeLeft = [];\r\n");
      out.write("\t\t\t\tobjects_windowCubeLeft.push(window_cube_left1);\r\n");
      out.write("\t\t\t\tobjects_windowCubeLeft.push(window_cube_left2);\r\n");
      out.write("\t\t\t\tobjects_windowCubeLeft.push(window_cube_left3);\r\n");
      out.write("\t\t\t\tobjects_windowCubeLeft.push(window_cube_left4);\r\n");
      out.write("\t\t\t\tobjects_windowCubeLeft.push(window_cube_left5);\r\n");
      out.write("\t\t\t\tobjects_windowCubeLeft.push(window_cube_left6);\r\n");
      out.write("\t\t\t\tobjects_windowCubeLeft.push(window_cube_left7);\r\n");
      out.write("\t\t\t\tobjects_windowCubeLeft.push(window_cube_left8);\r\n");
      out.write("\t\t\t\tobjects_windowCubeLeft.push(window_cube_left9);\r\n");
      out.write("\t\t\t\tobjects_windowCubeLeft.push(window_cube_left10);\r\n");
      out.write("\t\t\t\tobjects_windowCubeLeft.push(window_cube_left11);\r\n");
      out.write("\t\t\t\tobjects_windowCubeLeft.push(window_cube_left12);\r\n");
      out.write("\t\t\t\tobjects_windowCubeLeft.push(window_cube_left13);\r\n");
      out.write("\t\t\t\tobjects_windowCubeLeft.push(window_cube_left14);\r\n");
      out.write("\t\t\t\tobjects_windowCubeLeft.push(window_cube_left15);\r\n");
      out.write("\t\t\t\tobjects_windowCubeLeft.push(window_cube_left16);\r\n");
      out.write("\t\t\t\tcreateResultBsp(wallLeft, objects_windowCubeLeft, huangHeMaterial);\r\n");
      out.write("\t\t\t\tcreateWindow(150, 400, 20, 0, -3300, 300, 1810, \"窗\"); //左窗户1\r\n");
      out.write("\t\t\t\tcreateWindow(150, 400, 20, 0, -3000, 300, 1810, \"窗\");\r\n");
      out.write("\t\t\t\tcreateWindow(150, 400, 20, 0, -2500, 300, 1810, \"窗\");\r\n");
      out.write("\t\t\t\tcreateWindow(150, 400, 20, 0, -2200, 300, 1810, \"窗\");\r\n");
      out.write("\t\t\t\tcreateWindow(150, 400, 20, 0, -3300, 800, 1810, \"窗\");\r\n");
      out.write("\t\t\t\tcreateWindow(150, 400, 20, 0, -3000, 800, 1810, \"窗\");\r\n");
      out.write("\t\t\t\tcreateWindow(150, 400, 20, 0, -2500, 800, 1810, \"窗\");\r\n");
      out.write("\t\t\t\tcreateWindow(150, 400, 20, 0, -2200, 800, 1810, \"窗\");\r\n");
      out.write("\t\t\t\tcreateWindow(150, 400, 20, 0, -3300, 1300, 1810, \"窗\");\r\n");
      out.write("\t\t\t\tcreateWindow(150, 400, 20, 0, -3000, 1300, 1810, \"窗\");\r\n");
      out.write("\t\t\t\tcreateWindow(150, 400, 20, 0, -2500, 1300, 1810, \"窗\");\r\n");
      out.write("\t\t\t\tcreateWindow(150, 400, 20, 0, -2200, 1300, 1810, \"窗\");\r\n");
      out.write("\t\t\t\tcreateWindow(150, 400, 20, 0, -3300, 1800, 1810, \"窗\");\r\n");
      out.write("\t\t\t\tcreateWindow(150, 400, 20, 0, -3000, 1800, 1810, \"窗\");\r\n");
      out.write("\t\t\t\tcreateWindow(150, 400, 20, 0, -2500, 1800, 1810, \"窗\");\r\n");
      out.write("\t\t\t\tcreateWindow(150, 400, 20, 0, -2200, 1800, 1810, \"窗\"); //左窗户16\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t//开右窗户\r\n");
      out.write("\t\t\t\tvar wallLeft = returnWallObject(1520, 2000, 20, 0, huangHeTiaoMaterial, 2750, 1000, 1810, \"墙\"); //玻璃右侧褐色墙\r\n");
      out.write("\t\t\t\tvar window_cube_left1 = returnWallObject(150, 400, 20, 0, huangHeMaterial, 3300, 300, 1810, \"窗\");\r\n");
      out.write("\t\t\t\tvar window_cube_left2 = returnWallObject(150, 400, 20, 0, huangHeMaterial, 3000, 300, 1810, \"窗\");\r\n");
      out.write("\t\t\t\tvar window_cube_left3 = returnWallObject(150, 400, 20, 0, huangHeMaterial, 2500, 300, 1810, \"窗\");\r\n");
      out.write("\t\t\t\tvar window_cube_left4 = returnWallObject(150, 400, 20, 0, huangHeMaterial, 2200, 300, 1810, \"窗\");\r\n");
      out.write("\t\t\t\tvar window_cube_left5 = returnWallObject(150, 400, 20, 0, huangHeMaterial, 3300, 800, 1810, \"窗\");\r\n");
      out.write("\t\t\t\tvar window_cube_left6 = returnWallObject(150, 400, 20, 0, huangHeMaterial, 3000, 800, 1810, \"窗\");\r\n");
      out.write("\t\t\t\tvar window_cube_left7 = returnWallObject(150, 400, 20, 0, huangHeMaterial, 2500, 800, 1810, \"窗\");\r\n");
      out.write("\t\t\t\tvar window_cube_left8 = returnWallObject(150, 400, 20, 0, huangHeMaterial, 2200, 800, 1810, \"窗\");\r\n");
      out.write("\t\t\t\tvar window_cube_left9 = returnWallObject(150, 400, 20, 0, huangHeMaterial, 3300, 1300, 1810, \"窗\");\r\n");
      out.write("\t\t\t\tvar window_cube_left10 = returnWallObject(150, 400, 20, 0, huangHeMaterial, 3000, 1300, 1810, \"窗\");\r\n");
      out.write("\t\t\t\tvar window_cube_left11 = returnWallObject(150, 400, 20, 0, huangHeMaterial, 2500, 1300, 1810, \"窗\");\r\n");
      out.write("\t\t\t\tvar window_cube_left12 = returnWallObject(150, 400, 20, 0, huangHeMaterial, 2200, 1300, 1810, \"窗\");\r\n");
      out.write("\t\t\t\tvar window_cube_left13 = returnWallObject(150, 400, 20, 0, huangHeMaterial, 3300, 1800, 1810, \"窗\");\r\n");
      out.write("\t\t\t\tvar window_cube_left14 = returnWallObject(150, 400, 20, 0, huangHeMaterial, 3000, 1800, 1810, \"窗\");\r\n");
      out.write("\t\t\t\tvar window_cube_left15 = returnWallObject(150, 400, 20, 0, huangHeMaterial, 2500, 1800, 1810, \"窗\");\r\n");
      out.write("\t\t\t\tvar window_cube_left16 = returnWallObject(150, 400, 20, 0, huangHeMaterial, 2200, 1800, 1810, \"窗\"); ////右窗户16\r\n");
      out.write("\t\t\t\tvar objects_windowCubeLeft = [];\r\n");
      out.write("\t\t\t\tobjects_windowCubeLeft.push(window_cube_left1);\r\n");
      out.write("\t\t\t\tobjects_windowCubeLeft.push(window_cube_left2);\r\n");
      out.write("\t\t\t\tobjects_windowCubeLeft.push(window_cube_left3);\r\n");
      out.write("\t\t\t\tobjects_windowCubeLeft.push(window_cube_left4);\r\n");
      out.write("\t\t\t\tobjects_windowCubeLeft.push(window_cube_left5);\r\n");
      out.write("\t\t\t\tobjects_windowCubeLeft.push(window_cube_left6);\r\n");
      out.write("\t\t\t\tobjects_windowCubeLeft.push(window_cube_left7);\r\n");
      out.write("\t\t\t\tobjects_windowCubeLeft.push(window_cube_left8);\r\n");
      out.write("\t\t\t\tobjects_windowCubeLeft.push(window_cube_left9);\r\n");
      out.write("\t\t\t\tobjects_windowCubeLeft.push(window_cube_left10);\r\n");
      out.write("\t\t\t\tobjects_windowCubeLeft.push(window_cube_left11);\r\n");
      out.write("\t\t\t\tobjects_windowCubeLeft.push(window_cube_left12);\r\n");
      out.write("\t\t\t\tobjects_windowCubeLeft.push(window_cube_left13);\r\n");
      out.write("\t\t\t\tobjects_windowCubeLeft.push(window_cube_left14);\r\n");
      out.write("\t\t\t\tobjects_windowCubeLeft.push(window_cube_left15);\r\n");
      out.write("\t\t\t\tobjects_windowCubeLeft.push(window_cube_left16);\r\n");
      out.write("\t\t\t\tcreateResultBsp(wallLeft, objects_windowCubeLeft, huangHeMaterial);\r\n");
      out.write("\t\t\t\tcreateWindow(150, 400, 20, 0, 3300, 300, 1810, \"窗\"); //右窗户1\r\n");
      out.write("\t\t\t\tcreateWindow(150, 400, 20, 0, 3000, 300, 1810, \"窗\");\r\n");
      out.write("\t\t\t\tcreateWindow(150, 400, 20, 0, 2500, 300, 1810, \"窗\");\r\n");
      out.write("\t\t\t\tcreateWindow(150, 400, 20, 0, 2200, 300, 1810, \"窗\");\r\n");
      out.write("\t\t\t\tcreateWindow(150, 400, 20, 0, 3300, 800, 1810, \"窗\");\r\n");
      out.write("\t\t\t\tcreateWindow(150, 400, 20, 0, 3000, 800, 1810, \"窗\");\r\n");
      out.write("\t\t\t\tcreateWindow(150, 400, 20, 0, 2500, 800, 1810, \"窗\");\r\n");
      out.write("\t\t\t\tcreateWindow(150, 400, 20, 0, 2200, 800, 1810, \"窗\");\r\n");
      out.write("\t\t\t\tcreateWindow(150, 400, 20, 0, 3300, 1300, 1810, \"窗\");\r\n");
      out.write("\t\t\t\tcreateWindow(150, 400, 20, 0, 3000, 1300, 1810, \"窗\");\r\n");
      out.write("\t\t\t\tcreateWindow(150, 400, 20, 0, 2500, 1300, 1810, \"窗\");\r\n");
      out.write("\t\t\t\tcreateWindow(150, 400, 20, 0, 2200, 1300, 1810, \"窗\");\r\n");
      out.write("\t\t\t\tcreateWindow(150, 400, 20, 0, 3300, 1800, 1810, \"窗\");\r\n");
      out.write("\t\t\t\tcreateWindow(150, 400, 20, 0, 3000, 1800, 1810, \"窗\");\r\n");
      out.write("\t\t\t\tcreateWindow(150, 400, 20, 0, 2500, 1800, 1810, \"窗\");\r\n");
      out.write("\t\t\t\tcreateWindow(150, 400, 20, 0, 2200, 1800, 1810, \"窗\"); //右窗户16\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t// addArea(x,z,width,length,scene,name,textColor,font_size,textposition)\r\n");
      out.write("\t\t\t\taddArea(1900, 960, 3160, 1000, scene, \"ID1$东一区\", \"FF070F\", 60, \"左对齐\");\r\n");
      out.write("\t\t\t\taddArea(-1900, 960, 3160, 1000, scene, \"ID1$西一区\", \"FF070F\", 60, \"右对齐\");\r\n");
      out.write("\t\t\t\taddArea(0, -1300, 1600, 900, scene, \"ID1$中庭二区\", \"FF070F\", 60, \"居中对齐\");\r\n");
      out.write("\t\t\t\taddArea(1500, -850, 1000, 1200, scene, \"ID1$中庭三区\", \"FF070F\", 60, \"左对齐\");\r\n");
      out.write("\t\t\t\taddArea(-1500, -850, 1000, 1200, scene, \"ID1$中庭一区\", \"FF070F\", 60, \"左对齐\");\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t\t/**\r\n");
      out.write("\t\t\t * 初始化控件\r\n");
      out.write("\t\t\t * 通过Three.js的相机控件OrbitControls.js可以对Threejs的三维场景进行缩放、平移旋转操作，本质上改变的并不是场景，而是相机的参数，通过前面的学习应该知道，相机的位置角度不同，同一个场景的渲染效果是不一样，比如一个相机绕着一个场景旋转，就像场景旋转一样。\r\n");
      out.write("\t\t\t */\r\n");
      out.write("\t\t\tfunction initControls() {\r\n");
      out.write("\t\t\t\tcontrols = new THREE.OrbitControls(camera, renderer.domElement);\r\n");
      out.write("\t\t\t\tcontrols.enableDamping = true;\r\n");
      out.write("\t\t\t\tcontrols.dampingFactor = 0.1;\r\n");
      out.write("\t\t\t\tcontrols.minDistance = 5; // 视角最小距离\r\n");
      out.write("\t\t\t\tcontrols.maxDistance = 7000; // 视角最远距离\r\n");
      out.write("\t\t\t\tcontrols.maxPolarAngle = Math.PI / 2; // 最大角度\r\n");
      out.write("\t\t\t\tcontrols.target = new THREE.Vector3(200, 200, 0);\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\r\n");
      out.write("\t\t\t/**\r\n");
      out.write("\t\t\t * 初始化性能插件，左上角那个小框\r\n");
      out.write("\t\t\t */\r\n");
      out.write("\t\t\tfunction initStats() {\r\n");
      out.write("\t\t\t\tvar stats = new Stats();\r\n");
      out.write("\t\t\t\tstats.domElement.style.position = 'absolute';\r\n");
      out.write("\t\t\t\tstats.domElement.style.left = '0px';\r\n");
      out.write("\t\t\t\tstats.domElement.style.top = '0px';\r\n");
      out.write("\t\t\t\tdocument.body.appendChild(stats.domElement);\r\n");
      out.write("\t\t\t\treturn stats;\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\r\n");
      out.write("\t\t\t/**\r\n");
      out.write("\t\t\t * 初始化辅助坐标\r\n");
      out.write("\t\t\t * 初始化辅助坐标系,参数表示坐标系大小，可以根据场景大小设置\r\n");
      out.write("\t\t\t */\r\n");
      out.write("\t\t\tfunction initaxesHelper(size, scene) {\r\n");
      out.write("\t\t\t\tvar axesHelper = new THREE.AxesHelper(size);\r\n");
      out.write("\t\t\t\tscene.add(axesHelper);\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t\tfunction selectShlefCorrpe(selfName)\r\n");
      out.write("\t\t\t{\r\n");
      out.write("\t\t\t\tvar localShlef;\r\n");
      out.write("\t\t\t\tvar arr=selfName.split('-');\r\n");
      out.write("\t\t\t\tif(arr[1]=='A')\r\n");
      out.write("\t\t\t\t{\r\n");
      out.write("\t\t\t\t\tlocalShlef='中庭一区';\r\n");
      out.write("\t\t\t\t}else if(arr[1]=='B'){\r\n");
      out.write("\t\t\t\t\tlocalShlef='中庭二区';\r\n");
      out.write("\t\t\t\t}else if(arr[1]=='C'){\r\n");
      out.write("\t\t\t\t\tlocalShlef='中庭三区';\r\n");
      out.write("\t\t\t\t}else if(arr[1]=='D'){\r\n");
      out.write("\t\t\t\t\tlocalShlef='西一区';\r\n");
      out.write("\t\t\t\t}else if(arr[1]=='E'){\r\n");
      out.write("\t\t\t\t\tlocalShlef='东一区';\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t\tlocalShlef=localShlef+arr[2];\r\n");
      out.write("\t\t\t\treturn localShlef;\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\tfunction selectAreaCorrpe(areaNum)\r\n");
      out.write("\t\t\t{\r\n");
      out.write("\t\t\t\tvar localArea;\r\n");
      out.write("\t\t\t\tif(areaNum=='A')\r\n");
      out.write("\t\t\t\t{\r\n");
      out.write("\t\t\t\t\tlocalArea='中庭一区';\r\n");
      out.write("\t\t\t\t}else if(areaNum=='B'){\r\n");
      out.write("\t\t\t\t\tlocalArea='中庭二区';\r\n");
      out.write("\t\t\t\t}else if(areaNum=='C'){\r\n");
      out.write("\t\t\t\t\tlocalArea='中庭三区';\r\n");
      out.write("\t\t\t\t}else if(areaNum=='D'){\r\n");
      out.write("\t\t\t\t\tlocalArea='西一区';\r\n");
      out.write("\t\t\t\t}else if(areaNum=='E'){\r\n");
      out.write("\t\t\t\t\tlocalArea='东一区';\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t\treturn localArea;\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\t/**\r\n");
      out.write("\t\t\t * 初始化GUI\r\n");
      out.write("\t\t\t */\r\n");
      out.write("\t\t\tfunction initGui() {\r\n");
      out.write("\t\t\t\toptions = new function() {\r\n");
      out.write("\t\t\t\t\tvar pararm=$.getUrlParam('shelf');\r\n");
      out.write("\t\t\t\t\t//alert(pararm);\r\n");
      out.write("\t\t\t\t\tvar chooseArr= pararm.split('-');\r\n");
      out.write("\t\t\t\t\tvar chooseStorageNum = chooseArr[0];\r\n");
      out.write("\t\t\t\t\tvar chooseArea = chooseArr[1];\r\n");
      out.write("\t\t\t\t\tvar chooseShelfNum = chooseArr[2];\r\n");
      out.write("\t\t\t\t\tthis.storageNum = chooseStorageNum;\r\n");
      out.write("\t\t\t\t\tthis.AreaNum = selectAreaCorrpe(chooseArea);\r\n");
      out.write("\t\t\t\t\tthis.shelfNum = chooseShelfNum;\r\n");
      out.write("\t\t\t\t\tthis.查看书架位置 = function() { //寻找书架\r\n");
      out.write("\t\t\t\t\t\tpararm=selectShlefCorrpe(pararm);\r\n");
      out.write("\t\t\t\t\t\taddShelf(scene, chooseArea);\r\n");
      out.write("\t\t\t\t\t\tsearchShelf(pararm);\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\tthis.实时全景漫游 = function() {\r\n");
      out.write("\t\t\t\t\t\tcamera.position.set(0, 500, 1500); //设置透视投影的相机\r\n");
      out.write("\t\t\t\t\t\tcamera.lookAt(new THREE.Vector3(0, 0, 0));\r\n");
      out.write("\t\t\t\t\t\taddShelf(scene, 6);\r\n");
      out.write("\t\t\t\t\t\t/* var shelf_list = GET_SHELF_LIST(6);\r\n");
      out.write("\t\t\t\t\t\tfor (var i = 1; i <= GET_LAYER_NUM(); i++) {\r\n");
      out.write("\t\t\t\t\t\t\tfor (var j = 1; j <= GET_COLUMN_NUM(); j++) {\r\n");
      out.write("\t\t\t\t\t\t\t\tfor (var k = 1; k <= shelf_list.length; k++) {\r\n");
      out.write("\t\t\t\t\t\t\t\t\taddOneUnitCargos(shelf_list[k - 1].shelfId, i, j, scene);\r\n");
      out.write("\t\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t} */\r\n");
      out.write("\t\t\t\t\t};\r\n");
      out.write("\t\t\t\t};\r\n");
      out.write("\t\t\t\tvar gui = new dat.GUI();\r\n");
      out.write("\t\t\t\tgui.add(options, 'storageNum').name(\"所在楼层：\");\r\n");
      out.write("\t\t\t\tgui.add(options, 'AreaNum').name(\"所在分区：\");\r\n");
      out.write("\t\t\t\tgui.domElement.style = 'position:absolute;top:10px;left:0px;height:600px';\r\n");
      out.write("\t\t\t\tgui.add(options, 'shelfNum').name(\"书架编号：\");\r\n");
      out.write("\t\t\t\tgui.add(options, '查看书架位置');\r\n");
      out.write("\t\t\t\tgui.add(options, '实时全景漫游');\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\r\n");
      out.write("\t\t\t/**\r\n");
      out.write("\t\t\t * 初始化\r\n");
      out.write("\t\t\t */\r\n");
      out.write("\t\t\tfunction init() {\r\n");
      out.write("\t\t\t\tinitMat();\r\n");
      out.write("\t\t\t\tinitScene();\r\n");
      out.write("\t\t\t\taddSkybox(12000, scene);\r\n");
      out.write("\t\t\t\tinitCamera();\r\n");
      out.write("\t\t\t\t//initStats();性能插件\r\n");
      out.write("\t\t\t\tinitRenderer();\r\n");
      out.write("\t\t\t\tinitContent();\r\n");
      out.write("\t\t\t\t// addShelf(scene, chooseArea);\r\n");
      out.write("\t\t\t\tinitLight();\r\n");
      out.write("\t\t\t\tinitControls();\r\n");
      out.write("\t\t\t\tinitGui();\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t//initaxesHelper(8000, scene); //初始化辅助坐标\r\n");
      out.write("\t\t\t\t//添加书本\r\n");
      out.write("\t\t\t\t// var shelf_list = GET_SHELF_LIST(chooseArea);\r\n");
      out.write("\t\t\t\t// for (var i = 1; i <= GET_LAYER_NUM(); i++) {\r\n");
      out.write("\t\t\t\t// \tfor (var j = 1; j <= GET_COLUMN_NUM(); j++) {\r\n");
      out.write("\t\t\t\t// \t\tfor (var k = 1; k <= shelf_list.length; k++) {\r\n");
      out.write("\t\t\t\t// \t\t\taddOneUnitCargos(shelf_list[k - 1].shelfId, i, j, scene);\r\n");
      out.write("\t\t\t\t// \t\t}\r\n");
      out.write("\t\t\t\t// \t}\r\n");
      out.write("\t\t\t\t// }\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t//添加拖动效果\r\n");
      out.write("\t\t\t\t// 过滤不是 Mesh 的物体,例如辅助网格\r\n");
      out.write("\t\t\t\tvar objects = [];\r\n");
      out.write("\t\t\t\tfor (var i = 0; i < scene.children.length; i++) {\r\n");
      out.write("\t\t\t\t\tvar Msg = scene.children[i].name.split(\"$\");\r\n");
      out.write("\t\t\t\t\tif (scene.children[i].isMesh && Msg[0] == \"书本\") {\r\n");
      out.write("\t\t\t\t\t\tobjects.push(scene.children[i]);\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t\t//添加选中时的蒙版\r\n");
      out.write("\t\t\t\t// new THREE.ThreeJs_Composer(renderer, scene, camera);\r\n");
      out.write("\t\t\t\tcomposer = new THREE.ThreeJs_Composer(renderer, scene, camera); //添加选中时的蒙版\r\n");
      out.write("\t\t\t\tvar dragControls = new THREE.DragControls(objects, camera, renderer.domElement);\r\n");
      out.write("\t\t\t\tdragControls.addEventListener('dragstart', function(event) {\r\n");
      out.write("\t\t\t\t\tcontrols.enabled = false;\r\n");
      out.write("\t\t\t\t\tisPaused = true;\r\n");
      out.write("\t\t\t\t});\r\n");
      out.write("\t\t\t\tdragControls.addEventListener('dragend', function(event) {\r\n");
      out.write("\t\t\t\t\tcontrols.enabled = true;\r\n");
      out.write("\t\t\t\t\tisPaused = false;\r\n");
      out.write("\t\t\t\t});\r\n");
      out.write("\r\n");
      out.write("\t\t\t\tdocument.addEventListener('resize', onWindowResize, false);\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\r\n");
      out.write("\t\t\t/**\r\n");
      out.write("\t\t\t * 窗口变动触发的方法\r\n");
      out.write("\t\t\t */\r\n");
      out.write("\t\t\tfunction onWindowResize() {\r\n");
      out.write("\t\t\t\tcamera.aspect = window.innerWidth / window.innerHeight;\r\n");
      out.write("\t\t\t\tcamera.updateProjectionMatrix();\r\n");
      out.write("\t\t\t\trenderer.setSize(window.innerWidth, window.innerHeight);\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\r\n");
      out.write("\t\t\tfunction animate() {\r\n");
      out.write("\t\t\t\trequestAnimationFrame(animate);\r\n");
      out.write("\t\t\t\trenderer.render(scene, camera);\r\n");
      out.write("\t\t\t\tcomposer.render();\r\n");
      out.write("\t\t\t\tupdate();\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\r\n");
      out.write("\t\t\t/**\r\n");
      out.write("\t\t\t * 更新控件\r\n");
      out.write("\t\t\t */\r\n");
      out.write("\t\t\tfunction update() {\r\n");
      out.write("\t\t\t\tcontrols.update();\r\n");
      out.write("\t\t\t\tTWEEN.update();\r\n");
      out.write("\t\t\t\t//RollTexture.offset.x += 0.001;\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\r\n");
      out.write("\t\t\tinit();\r\n");
      out.write("\t\t\tanimate();\r\n");
      out.write("\t\t</script>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\t</body>\r\n");
      out.write("</html>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
